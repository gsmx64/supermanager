---
# tasks file for k8smaster

- name: Update all installed packages using APT module
  apt:
    upgrade: dist
    update_cache: yes
  register: apt_update_status

- name: Install required system packages
  apt:
    name:
      - ca-certificates
      - openssl
      - curl
      - wget
      - nano
      - unzip
      - git
      - gcc
      - libssl-dev
      - libbz2-dev
      - libffi-dev
      - zlib1g-dev
      - tar
      - jq
      - make
      - gnupg
      - lsb-release
      - apt-transport-https
      - python3-pip
      - python3-dev
      - libpq-dev
      - build-essential
      - python3-psycopg2
    state: latest
    update_cache: yes

- name: Docker Engine - Uninstall old versions
  apt:
    name:
      - docker-client
      - docker-client-latest
      - docker-common
      - docker-latest
      - docker-latest-logrotate
      - docker-logrotate
      - docker-engine
      - docker.io
      - docker-compose
      - docker-doc
      - podman-docker
    state: absent
    purge: yes

- name: Docker Engine - Add Docker official GPG key
  shell: |
    apt-get install ca-certificates curl
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
    chmod a+r /etc/apt/keyrings/docker.asc

- name: Docker Engine - Add Docker Repository
  shell: |
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt-get update -y

- name: Docker Engine - Install the latest version of Docker Engine and containerd
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: latest
    update_cache: yes
  notify: Start and enable docker

- name: Docker Engine - Add the current user to the docker group
  user:
    name: "VPSK3S01_USER"
    groups: docker
    append: yes

- name: Docker Engine - Start and enable docker
  systemd:
    name: docker
    state: started
    enabled: yes

- name: PostgreSQL 15 - Add Repository
  shell: |
    apt install curl ca-certificates
    install -d /usr/share/postgresql-common/pgdg
    curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc
    . /etc/os-release
    sh -c "echo 'deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $VERSION_CODENAME-pgdg main' > /etc/apt/sources.list.d/pgdg.list"
    apt-get update -y

- name: PostgreSQL 15 - Install PostgreSQL 15
  apt:
    name:
      - postgresql-15
      - postgresql-contrib
    state: present
    update_cache: yes

- name: PostgreSQL 15 - Configure pg_hba.conf to enable MD5
  copy:
    src: "./postgresql/data/pg_hba.conf"
    dest: "/etc/postgresql/15/main/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: '0640'

- name: PostgreSQL 15 - Configure postgresql.conf to enable listen_addresses
  copy:
    src: "./postgresql/data/postgresql.conf"
    dest: "/etc/postgresql/15/main/postgresql.conf"
    owner: postgres
    group: postgres
    mode: '0640'

- name: PostgreSQL 15 - Set password for postgres user
  become: yes
  become_user: postgres
  community.postgresql.postgresql_user:
    name: postgres
    password: "POSTGRES_ROOT_PASSWORD"
    db: postgres
    login_host: 127.0.0.1
    login_user: postgres
    login_password: "POSTGRES_ROOT_PASSWORD"
    role_attr_flags: "SUPERUSER"
    state: present

- name: PostgreSQL 15 - Enable and start the PostgreSQL service
  systemd:
    name: postgresql
    enabled: yes
    state: started

- name: PostgreSQL 15 - Create Cluster DB
  become: yes
  become_user: postgres
  community.postgresql.postgresql_db:
    name: "SUPERMANAGER_VPS_DB_NAME"
    encoding: UTF8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    state: present

- name: PostgreSQL 15 - Create Cluster DB user
  become: yes
  become_user: postgres
  community.postgresql.postgresql_user:
    name: "SUPERMANAGER_VPS_USER"
    password: "SUPERMANAGER_VPS_PASSWORD"
    db: "SUPERMANAGER_VPS_DB_NAME"
    login_host: 127.0.0.1
    login_user: "postgres"
    login_password: "POSTGRES_ROOT_PASSWORD"

- name: PostgreSQL 15 - Create Cluster DB
  become: yes
  become_user: postgres
  community.postgresql.postgresql_db:
    name: "SUPERMANAGER_DB_NAME"
    encoding: UTF8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    state: present

- name: PostgreSQL 15 - Create SuperManager DB user
  become: yes
  become_user: postgres
  community.postgresql.postgresql_user:
    name: "SUPERMANAGER_DB_USER"
    password: "SUPERMANAGER_DB_PASSWORD"
    db: "SUPERMANAGER_DB_NAME"
    login_host: 127.0.0.1
    login_user: "postgres"
    login_password: "POSTGRES_ROOT_PASSWORD"

- name: PostgreSQL 15 - Reload configuration
  shell: |
    systemctl reload postgresql

- name: K3s - Install K3s with custom parameters
  shell: |
    curl -sfL https://get.k3s.io | sh -s - server \
      --datastore-endpoint="K3S_DB_ENDPOINT" \
      --tls-san=K3S_FIXED_IP 
  args:
    creates: /usr/local/bin/k3s

- name: K3s - Enable and start k3s service
  systemd:
    name: k3s
    enabled: yes
    state: started

- name: K3s - Copy kubeconfig to current user
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "/home/VPSK3S01_USER/.kube/config"
    remote_src: yes
    owner: "VPSK3S01_USER"
    group: "VPSK3S01_USER"
    mode: '0600'
  when: ansible_user == "VPSK3S01_USER"

- name: Helm - Get latest Helm version
  uri:
    url: https://api.github.com/repos/helm/helm/releases/latest
    return_content: yes
  register: helm_latest_release

- name: Helm - Set latest Helm version fact
  set_fact:
    helm_version: "{{ helm_latest_release.json.tag_name | regex_replace('^v', '') }}"

- name: Helm - Download latest Helm tarball
  get_url:
    url: "https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz"
    dest: "/tmp/helm-v{{ helm_version }}-linux-amd64.tar.gz"
    mode: '0644'

- name: Helm - Extract helm binary
  unarchive:
    src: "/tmp/helm-v{{ helm_version }}-linux-amd64.tar.gz"
    dest: /tmp
    remote_src: yes
    creates: "/tmp/linux-amd64/helm"

- name: Helm - Move helm binary to /usr/local/bin
  copy:
    src: "/tmp/linux-amd64/helm"
    dest: /usr/local/bin/helm
    owner: root
    group: root
    mode: '0755'
    remote_src: yes

- name: Helm - Ensure /usr/local/bin is in sudo secure_path
  lineinfile:
    path: /etc/sudoers
    regexp: '^Defaults\s+secure_path='
    line: 'Defaults    secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"'
    validate: 'visudo -cf %s'
    state: present

- name: Helm - Add Bitnami repo and update
  shell: |
    helm repo add bitnami https://charts.bitnami.com/bitnami
    helm repo update
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

- name: Helm - Install OpenEBS with out Replicated Storage
  shell: |
    helm install openebs --namespace openebs openebs/openebs --set engines.replicated.mayastor.enabled=false --create-namespace

- name: Monitoring - Add Prometheus Helm Repository
  shell: |
    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
    kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
    helm install prometheus prometheus-community/prometheus \
    --namespace monitoring \
    --set alertmanager.persistentVolume.storageClass="openebs-hostpath" \
    --set server.persistentVolume.storageClass="openebs-hostpath"
  notify:
    - Restart kubelet

- name: Monitoring - Add Grafana Helm Repository
  shell: |
    helm repo add grafana https://grafana.github.io/helm-charts
    helm install grafana grafana/grafana \
    --namespace monitoring \
    --set persistence.storageClassName="openebs-hostpath" \
    --set persistence.enabled=true \
    --set adminPassword=GRAFANA_ADMIN_PASSWORD
  notify:
    - Restart kubelet

- name: Get the k3s cluster token value
  shell: cat /var/lib/rancher/k3s/server/token
  register: k3s_cluster_token

- name: Show the k3s cluster token value
  debug:
    msg: "The k3s cluster token is: {{ k3s_cluster_token.stdout }}"
